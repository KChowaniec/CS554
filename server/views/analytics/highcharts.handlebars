<script src="https://fb.me/react-15.0.1.js"></script>
<script src="https://fb.me/react-dom-15.0.1.js"></script>
<script src="http://code.highcharts.com/highcharts.js"></script>
<link rel="stylesheet" href="/public/css/analytics.css" type="text/css" />
<canvas id="c"></canvas>
<div id="react-bydecade" class="chart floatL"></div>
<div id="react-topfifteen" class="chart floatR clearR"></div>
<div id="react-bygenre" class="chart floatL"></div>
<div id="react-byrev" class="chart floatR clearR"></div>
<script type="text/javascript">

Highcharts.setOptions({
	lang: {thousandsSep: ","}
});

var Chart = React.createClass({
        // When the DOM is ready, create the chart.
        componentDidMount: function () {
            // Extend Highcharts with modules
            if (this.props.modules) {
                this.props.modules.forEach(function (module) {
                    module(Highcharts);
                });
            }
            // Set container which the chart should render to.
            this.chart = new Highcharts[this.props.type || "Chart"](this.props.container, this.props.options);
        }
        , //Destroy chart before unmount.
        componentWillUnmount: function () {
            this.chart.destroy();
        }
        , //Create the div which the chart will be rendered to.
        render: function () {
            return React.createElement('div', {
                id: this.props.container
            });
        }
    })
    , element
    , element2
    , element3
    , element4
;

element = React.createElement(Chart, {
    container: 'chart'
    , options: {
        chart: {
					plotBackgroundColor: null,
					plotBorderWidth: null,
					plotShadow: false,
					type: 'pie'
				},
				title: {
					text: 'Movies Count by Decade'
				},
				tooltip: {
					pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
				},
				plotOptions: {
					pie: {
						allowPointSelect: true,
						cursor: 'pointer',
						dataLabels: {
							enabled: false
						},
						showInLegend: true
					}
				},
				series: [{data:[{{#each resByDecade}}
                                    {{#_id}}
                                        {name:"{{yearRange}}",
                                    {{/_id}}
                                    y:{{count}} },
                                {{/each}}
                                ]}]
    }
});
    

element2 = React.createElement(Chart, {
    container: 'chart2'
    , options: {
        chart: {
					type: 'bar'
				},
				title: {
					text: 'Top 15 Movies by Ranking'
				},
				//tooltip: {
				//	pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
				//},
                xAxis: {
                    categories: [
                        {{#each resTopFifteen}}
                        "{{Title}}",
                        {{/each}}
                    ],
                    title: {
                        text: null
                    }
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: 'Rank',
                        align: 'high'
                    },
                    labels: {
                        overflow: 'justify'
                    }
                },
				plotOptions: {
                    bar: {
                        dataLabels: {
                            enabled: true
                        }
                    }
                },
				series: [{name:"Rank",data:[{{#each resTopFifteen}}
                        {{Rank}},
                        {{/each}}
                                ]}]
    }
});
    
element3 = React.createElement(Chart, {
    container: 'chart3'
    , options: {
        chart: {
					plotBackgroundColor: null,
					plotBorderWidth: null,
					plotShadow: false,
					type: 'pie'
				},
				title: {
					text: 'Movies Count by Genre'
				},
				tooltip: {
					pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
				},
				plotOptions: {
					pie: {
						allowPointSelect: true,
						cursor: 'pointer',
						dataLabels: {
							enabled: false
						},
						showInLegend: true
					}
				},
				series: [{data:[{{#each resByGenre}}
                                    {{#_id}}
                                        {name:"{{genre}}",
                                    {{/_id}}
                                    y:{{count}} },
                                {{/each}}
                                ]}]
    }
});

element4 = React.createElement(Chart, {
    container: 'chart4'
    , options: {
        chart: {
					type: 'bar'
				},
				title: {
					text: 'Top 15 Movies by Revenue'
				},
				//tooltip: {
				//	pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
				//},
                xAxis: {
                    categories: [
                        {{#each resTopRev}}
                        "{{Title}}",
                        {{/each}}
                    ],
                    title: {
                        text: null
                    }
                },
                yAxis: {
                    min: 0,
                    title: {
                        text: 'Revenue',
                        align: 'high'
                    },
                    labels: {
                        overflow: 'justify'
                    }
                },
				plotOptions: {
                    bar: {
                        dataLabels: {
                            enabled: false
                        }
                    }
                },
				series: [{name:"Revenue",data:[{{#each resTopRev}}
                        {{Revenue}},
                        {{/each}}
                                ]}]
    }
});
    
ReactDOM.render(element, document.getElementById('react-bydecade'));
ReactDOM.render(element2, document.getElementById('react-topfifteen'));
ReactDOM.render(element3, document.getElementById('react-bygenre'));
ReactDOM.render(element4, document.getElementById('react-byrev'));
    
var c = document.getElementById("c");
var ctx = c.getContext("2d");

//making the canvas full screen
c.height = window.innerHeight;
c.width = window.innerWidth;

//chinese characters - taken from the unicode charset
var chinese = "abcdefghijklmnopqrstuvwxyz0123456789";
//converting the string into an array of single characters
chinese = chinese.split("");

var font_size = 10;
var columns = c.width/font_size; //number of columns for the rain
//an array of drops - one per column
var drops = [];
//x below is the x coordinate
//1 = y co-ordinate of the drop(same for every drop initially)
for(var x = 0; x < columns; x++)
	drops[x] = 1; 

//drawing the characters
function draw()
{
	//Black BG for the canvas
	//translucent BG to show trail
	ctx.fillStyle = "rgba(0, 0, 0, 0.05)";
	ctx.fillRect(0, 0, c.width, c.height);
	
	ctx.fillStyle = "#0F0"; //green text
	ctx.font = font_size + "px arial";
	//looping over drops
	for(var i = 0; i < drops.length; i++)
	{
		//a random chinese character to print
		var text = chinese[Math.floor(Math.random()*chinese.length)];
		//x = i*font_size, y = value of drops[i]*font_size
		ctx.fillText(text, i*font_size, drops[i]*font_size);
		
		//sending the drop back to the top randomly after it has crossed the screen
		//adding a randomness to the reset to make the drops scattered on the Y axis
		if(drops[i]*font_size > c.height && Math.random() > 0.975)
			drops[i] = 0;
		
		//incrementing Y coordinate
		drops[i]++;
	}
}

setInterval(draw, 33);
</script>